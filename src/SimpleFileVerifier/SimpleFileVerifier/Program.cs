namespace SimpleFileVerifier
{
    using System;
    using System.IO;

    public class Program
    {
        public static int Main(string[] args)
        {
            int result = 0;

            var commandLineOptions = new CommandLineOptions();

            if (CommandLine.Parser.Default.ParseArguments(args, commandLineOptions))
            {
                string outputFile = commandLineOptions.Output;
                string directory = commandLineOptions.Directory;
                string file = commandLineOptions.File;
                string pattern = commandLineOptions.Pattern;
                string hashInformation = string.Empty;

                Console.WriteLine("SimpleFileVerifier by Ranjith Venkatesh" + Environment.NewLine);
                Console.WriteLine("CRC32 Hashes calculated using CodeFluent Runtime Client" + Environment.NewLine);

                if (File.Exists(file))
                {
                    PrintFileCRC32Hash(file, ref hashInformation);
                }
                else if (Directory.Exists(directory))
                {
                    DirectoryInfo directoryInfo = new DirectoryInfo(directory);

                    string searchPattern = "*.*";
                    if (string.IsNullOrEmpty(pattern) == false)
                    {
                        searchPattern = pattern;
                    }

                    foreach (FileInfo fileInfo in directoryInfo.GetFiles(searchPattern))
                    {
                        PrintFileCRC32Hash(fileInfo.FullName, ref hashInformation);
                    }
                }
                else
                {
                    Console.WriteLine(commandLineOptions.GetUsage());
                    return result;
                }

                Console.WriteLine(Environment.NewLine + "SimpleFileVerifier has successfully created the CRC32 hashes.");

                string outputDirectory = Path.GetDirectoryName(outputFile);
                if (Directory.Exists(outputDirectory))
                {
                    string header = ";" + Environment.NewLine + "; Generated by Simple File Verifier" + Environment.NewLine + "; " + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + Environment.NewLine + ";" + Environment.NewLine;
                    File.WriteAllText(outputFile, header + hashInformation);
                }
                else
                {
                    Console.WriteLine(Environment.NewLine + "SimpleFileVerifier cannot find the directory to write the sfv file:" + outputDirectory);
                }

                Console.WriteLine(Environment.NewLine + "SimpleFileVerifier has written the CRC32 hashes to the file:" + outputFile);

                result = 1;
            }

            return result;
        }

        private static void PrintFileCRC32Hash(string file, ref string hashInformation)
        {
            string crc32Hash = GetCRC32Hash(file);
            hashInformation = hashInformation + Environment.NewLine + Path.GetFileName(file) + " " + crc32Hash;
            Console.WriteLine(Path.GetFileName(file) + " " + crc32Hash);
        }

        private static string GetCRC32Hash(string file)
        {
            byte[] fileByteArray = FileToByteArray(file);
            uint crcUintValue = CodeFluent.Runtime.Utilities.Crc32.Compute(fileByteArray);
            return string.Format("{0:X}", crcUintValue);
        }

        /// <summary>
        /// Function to get byte array from a file
        /// </summary>
        /// <param name="_FileName">File name to get byte array</param>
        /// <returns>Byte Array</returns>
        private static byte[] FileToByteArray(string _FileName)
        {
            byte[] _Buffer = null;

            try
            {
                // Open file for reading
                System.IO.FileStream _FileStream = new System.IO.FileStream(_FileName, System.IO.FileMode.Open, System.IO.FileAccess.Read);

                // attach filestream to binary reader
                System.IO.BinaryReader _BinaryReader = new System.IO.BinaryReader(_FileStream);

                // get total byte length of the file
                long _TotalBytes = new System.IO.FileInfo(_FileName).Length;

                // read entire file into buffer
                _Buffer = _BinaryReader.ReadBytes((Int32)_TotalBytes);

                // close file reader
                _FileStream.Close();
            }
            catch (Exception _Exception)
            {
                // Error
                Console.WriteLine("Exception caught in process: {0}", _Exception.ToString());
            }

            return _Buffer;
        }


    }
}
